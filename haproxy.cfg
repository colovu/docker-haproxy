#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/2.0/doc/configuration.txt
#   https://cbonte.github.io/haproxy-dconv/2.0/configuration.html
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    # log         127.0.0.1 local2
    # 说明：
    #   1. 在容器中运行时，不可以配置daemon模式
    #   2. 不要修改PID文件的路径及socket文件的路径

    # chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy/haproxy.pid
    maxconn     4000
    nbproc      1
    user        haproxy
    group       haproxy

    # turn on stats unix socket
    # stats socket /var/run/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults

    mode                    http    # 支持 http、tcp、health；tcp是4层，http是7层，health只会返回OK
    log                     global  # log 127.0.0.1 local0 err #[err warning info debug]
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option redispatch       # 当 serverId 对应的服务器挂掉后，强制定向到其他健康的服务器
    option abortonclose     #当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接
    retries                 3       # 三次连接失败就认为是服务器不可用，也可以通过后面设置
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s     # 连接超时，支持 m/s/ms
    timeout client          1m      # 客户端超时，支持 m/s/ms
    timeout server          1m      # 服务器超时，支持 m/s/ms
    timeout http-keep-alive 10s
    timeout check           10s     # 心跳检测超时，支持 m/s/ms
    maxconn                 3000    # 默认的最大连接数

#---------------------------------------------------------------------
# example how to define user and enable Data Plane API on tcp/5555
# more information: https://github.com/haproxytech/dataplaneapi and
#   https://www.haproxy.com/documentation/hapee/2-0r1/configuration/dataplaneapi/
#---------------------------------------------------------------------
# userlist haproxy-dataplaneapi
#     user admin insecure-password mypassword
#
# program api
#    command /usr/bin/dataplaneapi --host 0.0.0.0 --port 5555 --haproxy-bin /usr/sbin/haproxy --config-file /etc/haproxy/haproxy.cfg --reload-cmd "kill -SIGUSR2 1" --reload-delay 5 --userlist hapee-dataplaneapi
#    no option start-on-reload

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  main
    bind *:80
    # bind *:443 ssl # To be completed ....

    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_end       -i .jpg .gif .png .css .js

    use_backend static          if url_static
    default_backend             app

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend static
    balance     roundrobin
    server      static1 127.0.0.1:4331 check
    server      static2 127.0.0.1:4332 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     roundrobin
    server  app1 127.0.0.1:5001 check
    server  app2 127.0.0.1:5002 check
    server  app3 127.0.0.1:5003 check
    server  app4 127.0.0.1:5004 check

#---------------------------------------------------------------------
# test1配置
#---------------------------------------------------------------------
listen test1                         # 这里是配置负载均衡，test1是名字，可以任意
        bind 0.0.0.0:3306            # 这里是监听的IP地址和端口，端口号可以在0-65535之间，要避免端口冲突
        mode tcp                     # 连接的协议，这里是tcp协议
        #maxconn 4086
        #log 127.0.0.1 local0 debug
        server s1 192.168.111.101:3306 #负载的机器
        server s2 192.168.111.102:3306 #负载的机器，负载的机器可以有多个，往下排列即可

#---------------------------------------------------------------------
# 监控服务配置
#   访问地址类似：http://192.168.111.100:8888/haproxy
#---------------------------------------------------------------------
listen  admin_stats
        bind 0.0.0.0:8888           # 绑定的端口
        mode  http                  # 链接的协议，这里提供HTTP服务
        stats uri   /haproxy        # 访问路径
        stats realm     Global\ statistics 
        stats auth  admin:admin     # 用户名及密码
